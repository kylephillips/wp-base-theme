var gulp = require('gulp');
var sass = require('gulp-sass')(require('sass'));
var autoprefix = require('gulp-autoprefixer');
var livereload = require('gulp-livereload');
var minifycss = require('gulp-minify-css');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var fs = require('fs');

// Style Paths
var scss = ['assets/scss/*', '!assets/scss/_colors.scss', '!assets/scss/_editor-formats-reference.scss'];
var config_json = JSON.parse(fs.readFileSync('config.json'));
var theme_json = JSON.parse(fs.readFileSync('theme.json'));
var css = __dirname;

// JS Paths
var js_source = [
	'assets/js/src/lib/jquery.fitvids.js',
	'assets/js/src/theme.scroll-to.js',
	'assets/js/src/theme.modals.js',
	'assets/js/src/theme.in-field-labels.js',
	'assets/js/src/theme.factory.js',
];
var js_compiled = 'assets/js/';


/**
* Output the color variables
*/
var color_vars = async function(){
	var scssString = "// This file generated with build process using config.json, located in the primary site directory\n\n // Edit colors in this file to generate styles and add to the editor\n\n// Do not edit this file directly\n";
	var json = theme_json.settings.color.palette;

	// Define variables for use in scss
	for ( const property in json ){
		if ( json.hasOwnProperty(property) && typeof json[property] !== 'undefined' ){
			scssString += "$" + json[property].slug + ": " + json[property].color + ";\n"; 
		}
	}

	scssString += "\n\n";

	// Write editor/gutenberg classes
	for ( const property in json ){
		if ( json.hasOwnProperty(property) && typeof json[property] !== 'undefined' ){
			scssString += ".has-" + json[property].slug + "-color {\n color: $" + json[property].slug + ";\n}\n"; 
			scssString += ".has-" + json[property].slug + "-background-color {\n background-color: $" + json[property].slug + ";\n}\n"; 
			scssString += ".has-" + json[property].slug + "-border-color {\n border-color: $" + json[property].slug + ";\n border-style: solid;\n}\n";
		}
	}
	
	// Half screen block
	scssString += "\n\n";
	scssString += "@media (max-width: 767px){\n";
	for ( const property in json ){
		if ( json.hasOwnProperty(property) && typeof json[property] !== 'undefined' ){
		scssString += ".block-half-screen-content .wp-block-column.has-" + json[property].slug + "-background-color {\n";
		scssString += " background-color: $" + json[property].slug + " !important;\n}\n\n"; 
		}
	}
	scssString += "\n}";
  	fs.writeFileSync("assets/scss/_colors.scss", scssString); 
}

/**
* Output the editor format reference
*/
var editor_formats = async function(){
	var scssString = "/**\n* This file generated with build process using config.json, located in the primary site directory\n* Edit colors in this file to generate styles and add to the editor\n* Do not edit this file directly\n* This file is for reference only. It will be overwritten on theme build.\n**/";
	var json = config_json.editor_formats;

	scssString += "\n\n";

	// Write editor/gutenberg classes
	for ( const property in json ){
		if ( json.hasOwnProperty(property) && typeof json[property] !== 'undefined' ){
			scssString += "// " + json[property].label + " Editor Format\n"
			scssString += ".is-style-" + property + " {\n}\n\n"; 
		}
	}
  	fs.writeFileSync("assets/scss/_editor-formats-reference.scss", scssString); 
}

/**
* Minify the front end Styles and output
*/
var styles = function(){
	return gulp.src(scss)
		.pipe(sass({sourceComments: 'map', sourceMap: 'sass', style: 'compact'}))
		.pipe(autoprefix('last 5 version'))
		.pipe(minifycss({keepBreaks: false}))
		.pipe(gulp.dest(css))
		.pipe(livereload());
}

/**
* Concatenate and minify scripts
*/
var scripts = function(){
	return gulp.src(js_source)
		.pipe(concat('scripts.min.js'))
		.pipe(uglify())
		.pipe(gulp.dest(js_compiled));
};

/**
* Watch Task
*/
gulp.task('watch', function(){
	livereload.listen();
	gulp.watch(scss, gulp.series(color_vars, editor_formats, styles));
	gulp.watch(js_source, gulp.series(scripts));
});

/**
* Default
*/
gulp.task('default', gulp.series(color_vars, editor_formats, styles, scripts, 'watch'));